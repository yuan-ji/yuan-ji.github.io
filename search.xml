<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[C/C++ 位域 Bit fields 学习心得]]></title>
      <url>%2FC-C-%E4%BD%8D%E5%9F%9F-Bit-fields-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97%2F</url>
      <content type="text"><![CDATA[Bit field 的定义 “ 位域 “ 或 “ 位段 “(Bit field)为一种数据结构，可以把数据以位的形式紧凑的储存，并允许程序员对此结构的位进行操作。这种数据结构的一个好处是它可以使数据单元节省储存空间，当程序需要成千上万个数据单元时，这种方法就显得尤为重要。第二个好处是位段可以很方便的访问一个整数值的部分内容从而可以简化程序源代码。而这种数据结构的缺点在于，位段实现依赖于具体的机器和系统，在不同的平台可能有不同的结果，这导致了位段在本质上是不可移植的。 位域的声明位域使用以下的结构声明 , 该结构声明为每个位域成员设置名称，并决定其宽度1234struct bit_field_name&#123; type member_name : width;&#125;; Elements Description bit_field_name 位域结构名 type 位域成员的类型，必须为 int、signed int 或者 unsigned int 类型 member_name 位域成员名 width 规定成员所占的位数 例如声明如下一个位域: 1234567struct _PRCODE&#123; unsigned int code1: 2; unsigned int cdde2: 2; unsigned int code3: 8;&#125;;struct _PRCODE prcode; 该定义使 prcode包含 2 个 2 Bits 位域和 1 个 8 Bits 位域，我们可以使用结构体的成员运算符对其进行赋值123prcode.code1 = 0;prcode.code2 = 3;procde.code3 = 102; tips:赋值时要注意值的大小不能超过位域成员的容量，例如 prcode.code3 为 8 Bits 的位域成员，其容量为 2^8 = 256，即赋值范围应为 [0,255]。 位域的大小和对齐位域的大小例如以下位域： 123456struct box &#123; unsigned int a: 1; unsigned int : 3; unsigned int b: 4;&#125;; 该位域结构体中间有一个未命名的位域，占据 3 Bits，仅起填充作用，并无实际意义。 填充使得该结构总共使用了 8 Bits。但 C 语言使用 unsigned int 作为位域的基本单位，即使一个结构的唯一成员为 1 Bit 的位域，该结构大小也和一个 unsigned int 大小相同。 有些系统中，unsigned int 为 16 Bits，在 x86 系统中为 32 Bits。文章以下均默认 unsigned int 为 32 Bits。 位域的对齐一个位域成员不允许跨越两个 unsigned int 的边界，如果成员声明的总位数超过了一个 unsigned int 的大小， 那么编辑器会自动移位位域成员，使其按照 unsigned int 的边界对齐。例如：123456struct stuff &#123; unsigned int field1: 30; unsigned int field2: 4; unsigned int field3: 3;&#125;; field1 + field2 = 34 Bits，超出 32 Bits, 编译器会将field2移位至下一个 unsigned int 单元存放， stuff.field1 和 stuff.field2 之间会留下一个 2 Bits 的空隙， stuff.field3 紧跟在 stuff.field2 之后，该结构现在大小为 2 * 32 = 64 Bits。 这个空洞可以用之前提到的未命名的位域成员填充，我们也可以使用一个宽度为 0 的未命名位域成员令下一位域成员与下一个整数对齐。例如:12345678struct stuff &#123; unsigned int field1: 30; unsigned int : 2; unsigned int field2: 4; unsigned int : 0; unsigned int field3: 3; &#125;; 这里 stuff.field1 与 stuff.field2 之间有一个 2 Bits 的空隙，stuff.field3 则存储在下一个 unsigned int 中，该结构现在大小为 3 * 32 = 96 Bits。 位域的初始化和位的重映射初始化位域的初始化与普通结构体初始化的方法相同，这里列举两种，如下:1struct stuff s1= &#123;20,8,6&#125;; 或者直接为位域成员赋值 1234struct stuff s1;s1.field1 = 20;s1.field2 = 8;s1.field3 = 4; 位域的重映射 (Re-mapping)声明一个 大小为 32 Bits 的位域123456struct box &#123; unsigned int ready: 2; unsigned int error: 2; unsigned int command: 4; unsigned int sector_no: 24;&#125;b1; 利用重映射将位域归零12int* p = (int *) &amp;b1; // 将 "位域结构体的地址" 映射至 "整形（int*) 的地址" *p = 0; // 清除 s1，将各成员归零 利用联合 (union) 将 32 Bits 位域 重映射至 unsigned int 型先简单介绍一下联合 “联合” 是一种特殊的类，也是一种构造类型的数据结构。在一个 “联合” 内可以定义多种不同的数据类型， 一个被说明为该 “联合” 类型的变量中，允许装入该 “联合” 所定义的任何一种数据，这些数据共享同一段内存，以达到节省空间的目的 “联合” 与 “结构” 有一些相似之处。但两者有本质上的不同。在结构中各成员有各自的内存空间， 一个结构变量的总长度是各成员长度之和（空结构除外，同时不考虑边界调整）。而在 “联合” 中，各成员共享一段内存空间， 一个联合变量的长度等于各成员中最长的长度。应该说明的是， 这里所谓的共享不是指把多个成员同时装入一个联合变量内， 而是指该联合变量可被赋予任一成员值，但每次只能赋一种值， 赋入新值则冲去旧值。 我们可以声明以下联合:1234union u_box &#123; struct box st_box; unsigned int ui_box;&#125;; x86 系统中 unsigned int 和 box 都为 32 Bits, 通过该联合使 st_box 和 ui_box 共享一块内存。具体位域中哪一位与 unsigned int 哪一位相对应，取决于编译器和硬件。利用联合将位域归零，代码如下：12union u_box u;u.ui_box = 0; 参考 C - Bit Fields Bit Field Bit fields 位段 C Primier Plus(第五版 中文版) - 15.4 位字段]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo 优化：提交 sitemap 及解决百度爬虫无法抓取 GitHub Pages 链接问题]]></title>
      <url>%2FHexo-%E4%BC%98%E5%8C%96%EF%BC%9A%E6%8F%90%E4%BA%A4sitemap%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E7%88%AC%E8%99%AB%E6%8A%93%E5%8F%96-GitHub-Pages-%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[前言博客搭建起来了，但搜索引擎总搜不到，太没有成就感了。于是下一步要做的就是针对搜索引擎的优化，最终根据网上资料和自己遇到的实际情况，完成此博文。本文主要分以下三个部分： 针对一般性的搜索引擎的优化配置 sitemap 的生成和提交 百度搜索的优化配置及解决百度爬虫无法爬取 GitHub Pages 链接的问题 一般来说应该先阐述如何向搜索引擎提交链接，再来说明优化的。但在实际操作中发现，因为优化中包括文章链接的变动，已经提交的链接变得无法检索，所以先进行一些优化，再提交链接为好。 验证博客是否被收录在谷歌或者百度的搜索链接中，使用以下格式可以直接搜索自己的域名，或者关键词 + 域名来更好地判断 , 如果能搜索到就说明已经被收录，反之则没有。可以直接搜索自己的域名，或者加一些关键词来更好地判断，例如 1wsl site:www.yuan-ji.me 一般性优化文章链接优化Hexo 默认的文章链接形式为 domain/year/month/day/postname，分级较多，造成 URL(Universal Resource Locator，统一资源定位符) 较长，不利于搜索引擎检索，我们可根据需要缩短 URL，将其改为 domain/postname的形式。编辑站点配置文件_config.yml, 将 permalink 字段改为 permalink: :title/。tips:如果仍想在 URL 中保留时间要素，比如将 URL 改为 domain/year-month-day/postname 的形式，也可将permalink字段改为 permalink: :year-:month-:day/:title/ 首页标题优化在主题目录下的主题配置文件 _config.yml 中新增 description 字段，后面添加你想为网站首页标题增加的描述 , 例如 description: xxxxx, 更改 \themes\next\layout 目录下的 index.swig文件，将代码 1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; &#123;% endblock %&#125; 改为1&#123;% block title %&#125; &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock&#125; 此时网站首页标题会变成 网站名称-网站描述的形式。 或者改为1&#123;% block title %&#125; &#123;&#123; theme.keywords &#125;&#125; - &#123;&#123; config.title &#125;&#125; - &#123;&#123; theme.description &#125;&#125; &#123;% endblock %&#125; 此时网站首页标题会变成 网站关键词-网站名称-网站描述的形式，theme.keywords 显示的是主题配置文件中 keywords 的内容。不过个人喜欢首页标题简洁些，所以还是维持了默认的只显示网站名称的形式。 限制出站链接，增加 nofollow 标签 nofollow 标签是由谷歌领头创新的一个 “反垃圾链接” 的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重！ 安装以下插件，自动为文章添加 nofollow 标签1npm install hexo-autonofollow --save 并在 站点配置文件 中添加以下字段12345nofollow: enable: true exclude: # 不添加 nofollow 标签的连接 - exclude1.com - exclude2.com 添加 robots.txt robots.txt（统一小写）是一种存放于网站根目录下的 ASCII 编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。 在 source 目录下增加 rebots.txt 文件， 我参考的 robots.txt 代码如下，请将域名改为自己的网站 1234567891011121314# hexo robots.txtUser-agent: *Allow: /Allow: /archives/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://www.yuan-ji.me/sitemap.xmlSitemap: http://www.yuan-ji.me/baidusitemap.xml 这样在下次部署博客时，robots.txt 就会被上传至网站了。稍后我们在提交 sitemap 时，可以顺便测试它是否被搜索引擎正确解析了。 sitemap 的生成和提交sitemap 的生成 Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是 XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。 简言之， 网站地图 {Sitemap} 对于 搜索引擎优化 （英语：Search Engine Optimization，缩写为 SEO）非常重要，在网站中加入 Sitemap 有利于搜索引擎蜘蛛的抓取和收录。我们用安装以下两个插件来生成适用于谷歌和百度的 sitemap 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 并在 站点配置文件中添加以下字代码 12345#hexo sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 之后在执行 hexo g 后， public目录下发现生成了 sitemap.xml 和 baidusitemap.xml 就表示配置成功了。 tips: 插件生成的 sitemap 的文章链接，都是以站点配置文件中的 url 为基础的，如果将博客绑定了域名，那最好将 url 字段填写为绑定的域名。 不想生成 sitemap 的页面，可在页面最上方以 --- 分割的区域内，即 Front-matter 中，添加代码 sitemap: false。 验证网站在我们向搜索引擎提交 sitemap 之前，搜索引擎需要先验证我们对网站的所有权。 为什么要验证网站 站长平台推荐站长添加主站（您网站的链接也许会使用 www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。如何验证网站首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html 标签验证、CNAME 验证。 1. 文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。 2.html 标签验证：将 html 标签添加至网站首页 html 代码的 标签与 标签之间。 3.CNAME 验证：您需要登录域名提供商或托管服务提供商的网站，添加新的 DNS 记录。 验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html 标签或 CNAME 记录，我们会去定期检查验证记录。 两个搜索引擎提交的入口分别为：Google Search Console百度站长平台验证的方法很多，我两个搜索引擎均采用 文件验证 的方法。Google 添加链接后，会自动跳转至验证页面，供我们下载 HTML 验证文件。 百度需要提交链接后，点击 验证网站所有权，下载 HTML 验证文件。将下载的验证文件在 source 目录下。 为了使 hexo 不处理这两个验证文件，并且不生成关于这两个文件的 sitemap，我们需要打开验证文件，在最上面添加以下代码 123layout: falsesitemap: false--- 执行 hexo 部署命令 123hexo cleanhexo ghexo d 之后，就可以查看验证是否通过了。 提交 sitemap向谷歌提交向谷歌提交 sitemap 比较简单，登录 Google Search Console ，选择已经验证过的站点，在抓取 -&gt; 站点地图 中，右上角可看到 添加 / 测试站点地图，添加 sitemap.xml 的链接即可，谷歌效率较高，一般当天或者第二天就能搜到微博了。tips: 需要注意的是，在生成 sitemap 时，要屏蔽掉谷歌和百度的验证文件 (方法见上文 ‘sitemap 的生成 ‘ tips), 否则谷歌在检测 sitemap 时报错。 另外可以在 抓取-&gt; robots.txt 测试工具 中点击测试，测试添加的 robots.txt 是否已经成功。 向百度提交与谷歌类似，我们可以直接向百度交 sitemap，登录 百度站长平台，点击 网页抓取-&gt; 链接提交，在 自动提交中选择 sitemap，输入自己的域名加 baidusitemap.xml 即可，比如我的是 http://www.yuan-ji.me/baidusitemap.xml 。 之后可查看 url 提取是否成功。 tips:和谷歌不同，百度提交了链接也不一定收录，要不断提升文章质量和数量才行。 百度相关的搜索配置由于 GitHub 屏蔽了百度的爬虫，即使提交成功，百度知道这里有可供抓取的链接，也不一定能抓取成功。 首先我们先检测一下百度爬虫是否可以抓取网页。在百度站长平台网页抓取-&gt;抓取诊断 中，选择PC UA点击抓取 , 查看抓取状态， 如果显示 抓取失败， 则需要进一步的配置。 tips:选择 移动 UA抓取一般都是会成功的。 主动推送和自动推送百度提供了多种链接提交的方式 如何选择链接提交方式1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。2、自动推送：最为便捷的提交方式，请将自动推送的 JS 代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。3、sitemap：您可以定期将网站链接放到 sitemap 中，然后将 sitemap 提交给百度。百度会周期性的抓取检查您提交的 sitemap，对其中的链接进行处理，但收录速度慢于主动推送。4、手动提交：一次性提交链接给百度，可以使用此种方式 我们可以综合使用，互为补充。 自动推送next 主题已经部署了自动推送的代码，我们只需在主题配置文件 中找到 baidu_push 字段 , 设置其为 true 即可。 主动推送为使用主动推送，需要安装插件 , 参考官方说明 Hexo 插件之百度主动提交链接 首先，在 Hexo 根目录下，安装本插件：1npm install hexo-baidu-url-submit --save 然后，同样在根目录下，把以下内容配置到 _config.yml 文件中:12345baidu_url_submit: count: 3 ## 比如 3，代表提交最新的三个链接 host: www.hui-wang.info ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里 ! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 其次，记得查看 _config.ym 文件中 url 的值， 必须包含是百度站长平台注册的域名（一般有 www）， 比如:​1234# URLurl: http://www.hui-wang.inforoot: /permalink: :year/:month/:day/:title/ 最后，加入新的 deployer:12deploy:- type: baidu_url_submitter 执行 hexo deploy 的时候，新的连接就会被推送了。 tips: 百度每天主动提交的链接数量是有限制的 主动推送可以推多少条链接？答：主动推送可提交的链接数量上限是根据您提交的新产生有价值链接数量而决定的，百度会根据您提交数量的情况不定期对上限额进行调整，提交的新产生有价值链接数量越多，可提交链接的上限越高。 主动推送是否成功会在执行 hexo deploy 时显示, success后的数字为主动推送成功的链接数 Coding.net 镜像部署还有一个解决思路是，利用 Coding.net 提供的 Coding Pages 功能另外部署一个镜像，让百度爬虫访问此镜像，普通用户还是访问位于 Github Pages 的页面。 注册 Coding.net 账号首先在注册 Coding.net 账号， 创建用户 Pages , 并绑定自己的域名，此处请参考 官方帮助文档。 修改域名绑定登录自己的域名解析的控制台， 将指向 pages.coding.me 的解析的线路类型设为 百度。 主机记录 记录类型 线路类型 记录值 www CNAME 百度 pages.coding.me 这样就为百度专门开了一条线路。 增加页面跳转Coding Pages 与 GitHub Pages 不同的一点是，即使绑定了域名，当用户直接访问 Coding.net 分配给自己的二级域名时，却不能跳到已绑定的域名。比如在访问 yuan-ji.coding.me 时，并不能跳转到 www.yuan-ji.me。为了避免用户误访问了 Coding Pages 的镜像，我们需要增加一段跳转代码。在位于 themes/next/layout/_partials/的 head.swig文件中，最后位置添加如下代码，he12345&lt;script language=&quot;javascript&quot;&gt; host = window.location.host if(host == &quot;yuan-ji.coding.me&quot;) window.location.href = window.location.href.replace(/yuan-ji.coding.me/,&quot;www.yuan-ji.me&quot;)&lt;/script&gt; 这样当用户在浏览器访问镜像时，会直接跳到我们在 GitHub 的页面，同时又不会影响百度爬虫。 在站点配置文件 中增加新的 deployer1234deploy: - type: git repo: git@git.coding.net:yuan-ji/yuan-ji.git branch: coding-pages 这样每次在执行部署时，博客会同时部署到 GitHub 和 Coding.net 的镜像上。 更新 Robots登录百度站长平台 , 点击 网页抓取-&gt;Robots-&gt; 检测并更新。 这样百度爬虫会检测并更新 robots.txt, 并会在新的 ip 地址上抓取内容，不然还是会抓取原来的 GitHub 上的 ip 地址，导致抓取失败。更新完成后，我们再次在抓取诊断中测试，这时应该就会抓取成功了。tips: 如果之前已经上传过 robots.txt 导致更新不成功的话，可以试着删除 robots.txt, 重新上传。 小结我最终三种方式混合使用，数据连接提交效果如下。 感慨一下，百度搜索提交实在是太过繁琐了，相比之下，谷歌搜索提交真是方便又有效率。 参考链接Hexo SEO优化动动手指，不限于NexT主题的Hexo优化（SEO篇）hexo干货系列：（六）hexo提交搜索引擎（百度+谷歌）URL网址统一修正使用 Hexo 搭建博客的深度优化与定制Hexo NexT 主题SEO优化指南Hexo插件之百度主动提交链接Hexo 博客添加百度sitemap解决 Github Pages 禁止百度爬虫的方法与可行性分析]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何在 Windows Subsystem for Linux (WSL) 上运行 Linux GUI 软件]]></title>
      <url>%2F%E5%A6%82%E4%BD%95%E5%9C%A8Windows-Subsystem-for-Linux-(WSL)-%E4%B8%8A%E8%BF%90%E8%A1%8CLinux-GUI-%E8%BD%AF%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[前言由于学校机房基本都是 Linux 系统，经常要使用 SSH 远程登陆到学校主机上做作业，而且又不是特别喜欢 PuTTY，所以一直靠虚拟机作为解决方案。但虚拟机的性能有限，在虚拟机和 Windows 之间一直来回切换也很令人恼火。所以在 WSL 的基本功能成熟后，打算试用一下。预计基本的应用场景为： 使用 SSH 的 -X 转发功能，在 Windows 下远程运行主机上的 GUI 程序做作业 用 WSL 替换掉 Git Bash 其他 Linux 和 Windows 可以相互配合的场景。 Windows Subsystem for Linux (WSL) 简介 Windows Subsystem for Linux（简称 WSL）是一个为在 Windows 10 上能够原生运行 Linux 二进制可执行文件（ELF 格式）的兼容层。它是由微软与 Canonical 公司合作开发，目标是使纯正的 Ubuntu 14.04 “Trusty Tahr” 映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。 WSL 又称 Bash on Ubuntu on Windows，使得 Ubuntu 用户可以在 Windows 上直接使用 Linux, 并可以与 Windows 的设备和文件互通。遗憾的是，该子系统官方并不支持运行带图形用户界面 (GUI) 的程序，不过我们可以通过 X 窗口系统 X-Server 达到这一目的。 WSL 安装参照 WSL 的 官方介绍, 安装步骤如下： 首先确定 Windows 的版本， 版本号在 build 14393 之后（包括 14393）的 64-bit 系统均可安装。版本号确定的方式如下：打开 设置 &gt; 系统 &gt; 关于，查看 OS 版本 和 系统类型两项 打开 开发人员模式，打开 设置 &gt; 更新和安全 &gt; 对开发人员，右侧选择 开发人员模式 在开始菜单中搜索并打开 启用或关闭 Windows 功能，勾选 适用于 Linux 的 Windows 子系统 (Beta) 在 CMD 中或直接在搜索栏中输入 bash 即可开始安装 , 并根据提示设定 UNIX 的用户和密码 WSL 指令简介根据 WSL 命令参考， Windows 通过两个重要的指令与 WSL 交互，即 bash.exe 和 lxrun.exe bash.exe 启动 Bash 并运行 /bin/bash lxrun.exe 用于管理 WSL，这个命令可以用来安装或者卸载 Ubuntu 镜像 命令 描述 bash 在当前目录启动 Bash，如果 Bash 尚未安装就自动运行 lxrun /install bash ~ 启动 Bash 并且进入 Ubuntu 用户目录， 类似于运行 cd ~ bash -c &quot;&lt;command&gt;&quot; 运行指令，打印输出，并返回至 Windows 命令行。 例：bash -c &quot;ls&quot; 命令 描述 lxrun lxrun 命令用于管理 WSL 实例 lxrun /install 开始下载安装程序; /y 选项可以用于自动应答安装过程的确认提示，并设置默认用户的 root 权限 lxrun /uninstall 删除 Ubuntu 镜像，默认不删除用户的 Ubuntu 主目录； /y 选项用于自动应答安装过程的确认提示； /full 选项会卸载并删除用户的 Ubuntu 主目录 lxrun /setdefaultuser &lt;userName&gt; 设置 默认的 Bash 用户 ；/y 选项可以用于自动应答确认，创建无密码用户 lxrun /update 更新子系统的安装包索引 WSL 的优势与不足 与虚拟机相比，WSL 需要更少的资源 (CPU，内存，存储空间)。 在运行 Windows 的同时，可以运行 Linux 命令行工具，并且能够访问 Windows 文件系统，实现两者交互 目前只支持使用 Ubuntu, 未来会提供更多 Linux 发行版 不支持 GUI 桌面程序和应用（比如 Gnome, KDE 等） 借助 X Server 在 WSL 上使用桌面程序X 窗口系统 (X Window System) 简介 X 窗口系统（ X Window System，也常称为 X11 或 X）是一种以位图方式显示的软件窗口系统。最初是 1984 年麻省理工学院的研究，之后变成 UNIX、类 UNIX、以及 OpenVMS 等操作系统所一致适用的标准化软件工具包及显示架构的运作协议。X 窗口系统通过软件工具及架构协议来创建操作系统所用的图形用户界面，此后则逐渐扩展适用到各形各色的其他操作系统上。现在几乎所有的操作系统都能支持与使用 X。更重要的是，今日知名的桌面环境——GNOME 和 KDE 也都是以 X 窗口系统为基础建构成的。 X Window System 主要由 X Server 和 X Client 两部分组成。其中 X Server 负责接受对图形输出 (窗口) 的请求并反馈用户输入，而 X Client 则是使用图形界面的应用程序。由于 WSL 本身不支持图形界面，我们需要额外安装 X Server 并指定图形输出位置，使得带有 GUI 的桌面程序可以被显示和运行。 X Server 的选择Windows 上常用的 X Server 有：Xmanager, Xming, VcXsrv 等，简单比较一下： Xmanager 是商业软件，需要付费 Xming 虽然是开源软件，但是从从 2007 年最后一个免费版本 (6.9.0.31) 之后，就需要捐助才能下载。不过免费版本虽然老旧，但由于 X Windows System 近年来变化不大，免费版还是基本够用 VcXsrv 为开源免费软件，使用方式及界面与 Xming 极为相近，还在不断更新，因此我最终选择此软件 VcXsrv 的安装和启动下载 VcXsrv 并进行安装后，运行 XLaunch，一直点 Next 至启动完成。 WSL 设置启动 X Server 后，需要在 WSL 中输入如下两条指令，重启 Bash，即可运行带有图形界面的 Linux 程序了12echo export DISPLAY=:0.0&gt;&gt;~/.bashrcsudo sed -i 's$&lt;listen&gt;.*&lt;/listen&gt;$&lt;listen&gt;tcp:host=localhost,port=0&lt;/listen&gt;$' /etc/dbus-1/session.conf 这里对这两条指令简单解释一下： 第一条指令该指令将export DISPLAY=:0.0 指令添加进 ~/.bashrc 中，使得每次开启新的 Bash 时，自动指定图形程序显示的位置。也可直接输入以下指令运行程序，无需export，但作用效果只有一次，再运行其他程序时，还要重新输入指令。 1DISPLAY=:0.0 gvim &amp; //gvim 为你想要打开的程序 tips: gvim 后的 &amp; 不是必须要加，它表示程序以后台启动的方式运行，这样在图形界面运行时，命令行窗口还可以继续使用。要是忘记加 &amp;, 也可以在程序运行时按ctrl+z, 将程序进程挂起，并输入bg，使其在后台运行 第二条指令第一条输入，重启 Bash 后 , 理论上就可以运行 Linux 程序了，但程序一般不会运行很久就挂掉了，并会提示 D-Bus异常，该异常会使得许多 Linux 的图形程序无法很好地运行。 这是因为 D-Bus 需要使用socket来通信，但 WSL 目前并不支持 socket。Reddit 上对此的解决方案为：用 tcp 代替 sockets 来使 D-Bus 运行。具体实现为:在 /etc/dbus-1/session.conf 中（需要 Root 权限），将&lt;listen&gt;unix:tmpdir=/tmp&lt;/listen&gt;字段替换为 &lt;listen&gt;tcp:host=localhost,port=0&lt;/listen&gt;，简单写就是第二条指令了。 进入 WSL 环境的多种方法到目前为止，我们就可以在 WSL 上使用 Linux 的图形界面了，甚至可以运行 Ubuntu 桌面。WSL 可以作为生产力工具与 Windows 交互使用，大大减少了使用虚拟机的机会。 虽然 WSL 相对来说还是略有不稳定，命令行窗口有时会突然无响应，会有些莫名其妙的异常出现，但总体还算满意。在平时使用场景中进入 WSL 环境，有多种方案，这里简单介绍两种： 直接运行 Bash直接运行 Bash 是最省事的，在搜索栏或者 CMD 输入 bash 就可进入 Bash 控制台。这种方式占用资源较低，运行最快，但是体验也很差。Bash 中无法输入中文，中文显示也不是特别好，只有 16 色，可定制性差，很不舒服。 使用 wsl-terminal wsl-terminal 是专门为 WSL 准备的终端模拟器，主体是 mintty，另外整合了一些工具，使用起来非常方便，也是目前用户体验最好的，大小也只有 1M 多，推荐使用。使用方法见官方主页，地址：https://github.com/goreliu/wsl-terminal。 使用方法亦可参考 更好地使用 Windows Subsystem for Linux （或者叫 Bash on Ubuntu on Windows）终端环境, 这个终端模拟工具十分好用，体积小巧，支持中文，配色丰富。尽管感觉比直接运行 Bash 要慢一些，但总体还可以接受。 小结相对于预期的应用场景，很遗憾不知道为什么虽然本地可以运行桌面程序，却无法 SSH -X 运行远程的桌面程序， 最终 SSH 的 X 映射还是选择了 MobaXterm 的免费版，启动略慢，但功能十分强大，界面也非常漂亮，如下图： 同时配合 wsl-terminal 在当前目录打开终端的功能，WSL 可以完全取代 Git Bash。 参考 官方介绍 WSL 官方博客 How to Run Graphical Linux Desktop Applications from Windows 10’s Bash Shell [Bash On Windows] 在 Windows Subsystem for Linux(WSL) 上运行任何桌面环境（已达可用阶段） Run any Desktop Environment in WSL Bash on Windows 开启 Ubuntu unity 和 Xfce4 桌面的方法 如何安装体验 Ubuntu on Windows 更好地使用 Windows Subsystem for Linux （或者叫 Bash on Ubuntu on Windows）终端环境]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用 Hexo 在 Github Pages 上搭建个人博客]]></title>
      <url>%2F%E4%BD%BF%E7%94%A8-Hexo-%E5%9C%A8-Github-Pages-%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo 和 GitHub Pages Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页GitHub Pages 可以被认为是用户编写的、托管在 GitHub 上的静态网页 系统环境配置 安装 Node.js 下载 Node.js 安装 Git 下载 Git GitHub Pages 配置注册 GitHub 账号访问 GitHub 官网 注册账号（已有 GitHub 账号的话可跳过此步骤）。 创建与 GitHub 同名的 Repository 点击右上角 + 号，选择 New repository 在 Repository name 中输入 你的 GitHub 账号名称 .github.io 点击 Create repository 完成注册 配置 SSH key SSH key 提供了一种与 GitHub 通信的方式，通过这种方式，能够在不输入密码的情况下，将 GitHub 作为自己的 remote 端服务器，进行版本控制 在文件管理中单击右键，选择 Git Bash here，打开 Git Bash ，输入一下命令 检查是否已经存在 SSH keys1ls -al ~/.ssh // 列出已经存在的 SSH keys 创建新的 SSH keys如果没有已经存在的 SSH keys，或者不想用已有的 keys，可创建一个新的，创建一个长度为 4096 的 SSH key，指令如下：1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" // 此处输入你的注册邮箱 显示如下：1234Generating public/private rsa key pair. // 生成一对 SSH keyEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] // 选择存储位置，直接回车就好Enter passphrase (empty for no passphrase): [Type a passphrase] // 输入 SSH key 密码，不设密码的话，直接回车确认就好Enter same passphrase again: [Type passphrase again] // 再次确认密码 把 SSH key 添加至 Github 账户信息中执行以下命令1clip &lt; ~/.ssh/id_rsa.pub // 将 SSH key 复制到剪贴板 打开 Github 官网，登陆后进入到个人设置 (点击头像-&gt;Settings) 点击左侧 SSH and GPG keys，点击 New SSH key 或者 Add SSH key 在Title栏填写名称，将之前复制的内容粘贴到Key栏中，最后点击Add SSH key即可 测试 SSH key 是否配置成功1ssh -T git@github.com 可能会弹出如下警告123The authenticity of host 'github.com (192.30.252.1)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 输入 yes 即可，最终显示12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 即表明配置成功 Hexo 安装及配置官方文档： GitHub Hexo 中文文档 安装 Hexo 任意位置新建一个文件夹， 如 D:\hexo，在此文件夹中单击右键，选择 “Git Bash Here”，打开 Git Bash 命令行界面。 执行以下命令1npm install hexo-cli -g 初始化博客执行以下命令，hexo 会新建并初始化一个 “blog” 的文件夹，之后入该目录12hexo init blogcd blog 安装 server 模块以供本地调试执行以下代码并加载 server 模块1npm install hexo-server --save 参考：配置 hexo 为什么运行到 hexo server 这步就没用了？ 启动服务器以供本地调试1hexo server // 或者 hexo s 现在打开 http://localhost:4000/ 就可以看到一篇内置的 blog 了，使用 Ctrl+C可以停掉服务器。 Tipswin10 系统 http://localhost:4000/ 可能无法打开， 可以使用以下命令换尝试其他端口1hexo s -p 3600 // -p 后面加端口号 参考：issues #1568 创建新的博文1hexo new "Hello Hexo" 命令执行后，会在 \source\_posts\ 目录下生成一个名为 Helli Hexo.md的文件，这个 markdown 文件就是你要编辑的博文了，可以再次启动hexo server 查看新生成的博文。对于文章具体的写作，请参考官方文档 Hexo 写作。 生成静态文件1hexo generate 命令执行完毕后，会在\public\目录下生成一系列文件用于网页部署 部署至 GitHub Pages安装 hexo-deployer-git1npm install hexo-deployer-git --save 在_config.yml中修改参数，首先找到如下内容1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 修改deploy段将其修改为1234deploy: type: git repo: git@github.com:yuan-ji/yuan-ji.github.io.git // 替换为自己的 repo branch: master Tips:: 号之后注意有一个空格 部署1hexo deploy // 或 hexo d 部署命令执行后，hexo 会自动把 public/ 目录下的文件上传至之前参数中的 GitHub 的 repo 中，并建立 commit ，之后就在浏览器中打开页面（例；https://yuan-ji.github.io/ ），查看是否部署成功。 总结配置完成后，之后每次写新博文的步骤如下：123456hexo new "new blog" // 生成新博文hexo server // 启动服务器本地调试（非必须），简化为 hexo shexo clean // 清除缓存hexo generate // 生成静态文件， 简化为：hexo ghexo deploy // 部署至 GitHub，简化为：hexo d 到现在就已经完成 Hexo 的基本配置，可以开始写博文了。 Hexo 优化配置更改 Hexo 主题Hexo 提供了非常多的主题，具体参见 Themes 。默认官方主题为 landscape ， 参考知乎推荐 有哪些好看的 Hexo 主题？，我选择了 Next 主题。Next 主题的官方文档十分详细，请参考以下链接：Next 主题配置官方文档 绑定个人域名GitHub 提供绑定域名的功能，可将个人拥有的域名指向在 GitHub 上创立博客。 注册域名域名供应商推荐：万网 （阿里云旗下）或者 国外的 GoDaddy DNS 解析规则设置 进入 万网，登陆到 控制台，点击左侧的 域名， 在之前已购买的域名栏右侧 ， 点击解析 点击添加解析，记录类型 选择 CNAME, 主机记录 填写 www, 记录值 填写要指向的自己博客的地址，点击 保存 DNS 解析设置一段时间后，可通过在 Windows 的 CMD 中 ping 自己的域名地址查看是否解析成功 创建 CNAME 文件在本地 source/ 目录下添加文佳 CNAME，内容为你所申请的域名地址 www.xxxxx.com，使访问你博客的地址跳转至所设置的域名上。保存后，执行以下命令部署，使设置生效123hexo clean hexo g hexo d 此时在浏览器中输入自己的域名，即可直接跳到自己的博客了。 搜索引擎相关优化请参考 Hexo-优化：提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题 参考链接 Hexo 官方中文文档 Next 主题官方文档 GitHub SSH 官方文档 Hexo 搭建 Github 静态博客 手把手教你使用 Hexo + Github Pages 搭建个人独立博客 Hexo+Github: 搭建属于自己的静态博客 如何生成 SSH key GitHub Pages 绑定来自阿里云的域名]]></content>
    </entry>

    
  
  
</search>
