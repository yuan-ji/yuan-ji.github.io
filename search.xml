<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[如何在 Windows Subsystem for Linux (WSL) 上运行 Linux GUI 软件]]></title>
      <url>%2F2016-11-26%2F%E5%A6%82%E4%BD%95%E5%9C%A8Windows-Subsystem-for-Linux-(WSL)-%E4%B8%8A%E8%BF%90%E8%A1%8CLinux-GUI-%E8%BD%AF%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[前言由于学校机房基本都是 Linux 系统，经常要使用 SSH 远程登陆到学校主机上做作业，而且又不是特别喜欢 PuTTY，所以一直靠虚拟机作为解决方案。但虚拟机的性能有限，在虚拟机和 Windows 之间一直来回切换也很令人恼火。所以在 WSL 的基本功能成熟后，打算试用一下。预计基本的应用场景为： 使用 SSH 的 -X 转发功能，在 Windows 下远程运行主机上的 GUI 程序做作业 用 WSL 替换掉 Git Bash 其他 Linux 和 Windows 可以相互配合的场景。 Windows Subsystem for Linux (WSL) 简介 Windows Subsystem for Linux（简称 WSL）是一个为在 Windows 10 上能够原生运行 Linux 二进制可执行文件（ELF 格式）的兼容层。它是由微软与 Canonical 公司合作开发，目标是使纯正的 Ubuntu 14.04 “Trusty Tahr” 映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。 WSL 又称 Bash on Ubuntu on Windows，使得 Ubuntu 用户可以在 Windows 上直接使用 Linux, 并可以与 Windows 的设备和文件互通。遗憾的是，该子系统官方并不支持运行带图形用户界面 (GUI) 的程序，不过我们可以通过 X 窗口系统 X-Server 达到这一目的。 WSL 安装参照 WSL 的 官方介绍, 安装步骤如下： 首先确定 Windows 的版本， 版本号在 build 14393 之后（包括 14393）的 64-bit 系统均可安装。版本号确定的方式如下：打开 设置 &gt; 系统 &gt; 关于，查看 OS 版本 和 系统类型两项 打开 开发人员模式，打开 设置 &gt; 更新和安全 &gt; 对开发人员，右侧选择 开发人员模式 在开始菜单中搜索并打开 启用或关闭 Windows 功能，勾选 适用于 Linux 的 Windows 子系统 (Beta) 在 CMD 中或直接在搜索栏中输入 bash 即可开始安装 , 并根据提示设定 UNIX 的用户和密码 WSL 指令简介根据 WSL 命令参考， Windows 通过两个重要的指令与 WSL 交互，即 bash.exe 和 lxrun.exe bash.exe 启动 Bash 并运行 /bin/bash lxrun.exe 用于管理 WSL，这个命令可以用来安装或者卸载 Ubuntu 镜像 命令 描述 bash 在当前目录启动 Bash，如果 Bash 尚未安装就自动运行 lxrun /install bash ~ 启动 Bash 并且进入 Ubuntu 用户目录， 类似于运行 cd ~ bash -c &quot;&lt;command&gt;&quot; 运行指令，打印输出，并返回至 Windows 命令行。 例：bash -c &quot;ls&quot; 命令 描述 lxrun lxrun 命令用于管理 WSL 实例 lxrun /install 开始下载安装程序; /y 选项可以用于自动应答安装过程的确认提示，并设置默认用户的 root 权限 lxrun /uninstall 删除 Ubuntu 镜像，默认不删除用户的 Ubuntu 主目录； /y 选项用于自动应答安装过程的确认提示； /full 选项会卸载并删除用户的 Ubuntu 主目录 lxrun /setdefaultuser &lt;userName&gt; 设置 默认的 Bash 用户 ；/y 选项可以用于自动应答确认，创建无密码用户 lxrun /update 更新子系统的安装包索引 WSL 的优势与不足 与虚拟机相比，WSL 需要更少的资源 (CPU，内存，存储空间)。 在运行 Windows 的同时，可以运行 Linux 命令行工具，并且能够访问 Windows 文件系统，实现两者交互 目前只支持使用 Ubuntu, 未来会提供更多 Linux 发行版 不支持 GUI 桌面程序和应用（比如 Gnome, KDE 等） 借助 X Server 在 WSL 上使用桌面程序X 窗口系统 (X Window System) 简介 X 窗口系统（ X Window System，也常称为 X11 或 X）是一种以位图方式显示的软件窗口系统。最初是 1984 年麻省理工学院的研究，之后变成 UNIX、类 UNIX、以及 OpenVMS 等操作系统所一致适用的标准化软件工具包及显示架构的运作协议。X 窗口系统通过软件工具及架构协议来创建操作系统所用的图形用户界面，此后则逐渐扩展适用到各形各色的其他操作系统上。现在几乎所有的操作系统都能支持与使用 X。更重要的是，今日知名的桌面环境——GNOME 和 KDE 也都是以 X 窗口系统为基础建构成的。 X Window System 主要由 X Server 和 X Client 两部分组成。其中 X Server 负责接受对图形输出 (窗口) 的请求并反馈用户输入，而 X Client 则是使用图形界面的应用程序。由于 WSL 本身不支持图形界面，我们需要额外安装 X Server 并指定图形输出位置，使得带有 GUI 的桌面程序可以被显示和运行。 X Server 的选择Windows 上常用的 X Server 有：Xmanager, Xming, VcXsrv 等，简单比较一下： Xmanager 是商业软件，需要付费 Xming 虽然是开源软件，但是从从 2007 年最后一个免费版本 (6.9.0.31) 之后，就需要捐助才能下载。不过免费版本虽然老旧，但由于 X Windows System 近年来变化不大，免费版还是基本够用 VcXsrv 为开源免费软件，使用方式及界面与 Xming 极为相近，还在不断更新，因此我最终选择此软件 VcXsrv 的安装和启动下载 VcXsrv 并进行安装后，运行 XLaunch，一直点 Next 至启动完成。 WSL 设置启动 X Server 后，需要在 WSL 中输入如下两条指令，重启 Bash，即可运行带有图形界面的 Linux 程序了12echo export DISPLAY=:0.0&gt;&gt;~/.bashrcsudo sed -i 's$&lt;listen&gt;.*&lt;/listen&gt;$&lt;listen&gt;tcp:host=localhost,port=0&lt;/listen&gt;$' /etc/dbus-1/session.conf 这里对这两条指令简单解释一下： 第一条指令该指令将export DISPLAY=:0.0 指令添加进 ~/.bashrc 中，使得每次开启新的 Bash 时，自动指定图形程序显示的位置。也可直接输入以下指令运行程序，无需export，但作用效果只有一次，再运行其他程序时，还要重新输入指令。 1DISPLAY=:0.0 gvim &amp; //gvim 为你想要打开的程序 tips: gvim 后的 &amp; 不是必须要加，它表示程序以后台启动的方式运行，这样在图形界面运行时，命令行窗口还可以继续使用。要是忘记加 &amp;, 也可以在程序运行时按ctrl+z, 将程序进程挂起，并输入bg，使其在后台运行 第二条指令第一条输入，重启 Bash 后 , 理论上就可以运行 Linux 程序了，但程序一般不会运行很久就挂掉了，并会提示 D-Bus异常，该异常会使得许多 Linux 的图形程序无法很好地运行。 这是因为 D-Bus 需要使用socket来通信，但 WSL 目前并不支持 socket。Reddit 上对此的解决方案为：用 tcp 代替 sockets 来使 D-Bus 运行。具体实现为:在 /etc/dbus-1/session.conf 中（需要 Root 权限），将&lt;listen&gt;unix:tmpdir=/tmp&lt;/listen&gt;字段替换为 &lt;listen&gt;tcp:host=localhost,port=0&lt;/listen&gt;，简单写就是第二条指令了。 进入 WSL 环境的多种方法到目前为止，我们就可以在 WSL 上使用 Linux 的图形界面了，甚至可以运行 Ubuntu 桌面。WSL 可以作为生产力工具与 Windows 交互使用，大大减少了使用虚拟机的机会。 虽然 WSL 相对来说还是略有不稳定，命令行窗口有时会突然无响应，会有些莫名其妙的异常出现，但总体还算满意。在平时使用场景中进入 WSL 环境，有多种方案，这里简单介绍两种： 直接运行 Bash直接运行 Bash 是最省事的，在搜索栏或者 CMD 输入 bash 就可进入 Bash 控制台。这种方式占用资源较低，运行最快，但是体验也很差。Bash 中无法输入中文，中文显示也不是特别好，只有 16 色，可定制性差，很不舒服。 使用 wsl-terminal wsl-terminal 是专门为 WSL 准备的终端模拟器，主体是 mintty，另外整合了一些工具，使用起来非常方便，也是目前用户体验最好的，大小也只有 1M 多，推荐使用。使用方法见官方主页，地址：https://github.com/goreliu/wsl-terminal。 使用方法亦可参考 更好地使用 Windows Subsystem for Linux （或者叫 Bash on Ubuntu on Windows）终端环境, 这个终端模拟工具十分好用，体积小巧，支持中文，配色丰富。尽管感觉比直接运行 Bash 要慢一些，但总体还可以接受。 小结相对于预期的应用场景，很遗憾不知道为什么虽然本地可以运行桌面程序，却无法 SSH -X 运行远程的桌面程序， 最终 SSH 的 X 映射还是选择了 MobaXterm 的免费版，启动略慢，但功能十分强大，界面也非常漂亮，如下图： 同时配合 wsl-terminal 在当前目录打开终端的功能，WSL 可以完全取代 Git Bash。 参考 官方介绍 WSL 官方博客 How to Run Graphical Linux Desktop Applications from Windows 10’s Bash Shell [Bash On Windows] 在 Windows Subsystem for Linux(WSL) 上运行任何桌面环境（已达可用阶段） Run any Desktop Environment in WSL Bash on Windows 开启 Ubuntu unity 和 Xfce4 桌面的方法 如何安装体验 Ubuntu on Windows 更好地使用 Windows Subsystem for Linux （或者叫 Bash on Ubuntu on Windows）终端环境]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用 Hexo 在 Github Pages 上搭建个人博客]]></title>
      <url>%2F2016-11-19%2F%E4%BD%BF%E7%94%A8-Hexo-%E5%9C%A8-Github-Pages-%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo 和 GitHub Pages Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页GitHub Pages 可以被认为是用户编写的、托管在 GitHub 上的静态网页 系统环境配置 安装 Node.js 下载 Node.js 安装 Git 下载 Git GitHub Pages 配置注册 GitHub 账号访问 GitHub 官网 注册账号（已有 GitHub 账号的话可跳过此步骤）。 创建与 GitHub 同名的 Repository 点击右上角 + 号，选择 New repository 在 Repository name 中输入 你的 GitHub 账号名称 .github.io 点击 Create repository 完成注册 配置 SSH key SSH key 提供了一种与 GitHub 通信的方式，通过这种方式，能够在不输入密码的情况下，将 GitHub 作为自己的 remote 端服务器，进行版本控制 在文件管理中单击右键，选择 Git Bash here，打开 Git Bash ，输入一下命令 检查是否已经存在 SSH keys1ls -al ~/.ssh // 列出已经存在的 SSH keys 创建新的 SSH keys如果没有已经存在的 SSH keys，或者不想用已有的 keys，可创建一个新的，创建一个长度为 4096 的 SSH key，指令如下：1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" // 此处输入你的注册邮箱 显示如下：1234Generating public/private rsa key pair. // 生成一对 SSH keyEnter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] // 选择存储位置，直接回车就好Enter passphrase (empty for no passphrase): [Type a passphrase] // 输入 SSH key 密码，不设密码的话，直接回车确认就好Enter same passphrase again: [Type passphrase again] // 再次确认密码 把 SSH key 添加至 Github 账户信息中执行以下命令1clip &lt; ~/.ssh/id_rsa.pub // 将 SSH key 复制到剪贴板 打开 Github 官网，登陆后进入到个人设置 (点击头像-&gt;Settings) 点击左侧 SSH and GPG keys，点击 New SSH key 或者 Add SSH key 在Title栏填写名称，将之前复制的内容粘贴到Key栏中，最后点击Add SSH key即可 测试 SSH key 是否配置成功1ssh -T git@github.com 可能会弹出如下警告123The authenticity of host 'github.com (192.30.252.1)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 输入 yes 即可，最终显示12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 即表明配置成功 Hexo 安装及配置官方文档： GitHub Hexo 中文文档 安装 Hexo 任意位置新建一个文件夹， 如 D:\hexo，在此文件夹中单击右键，选择 “Git Bash Here”，打开 Git Bash 命令行界面。 执行以下命令1npm install hexo-cli -g 初始化博客执行以下命令，hexo 会新建并初始化一个 “blog” 的文件夹，之后入该目录12hexo init blogcd blog 安装 server 模块以供本地调试执行以下代码并加载 server 模块1npm install hexo-server --save 参考：配置 hexo 为什么运行到 hexo server 这步就没用了？ 启动服务器以供本地调试1hexo server // 或者 hexo s 现在打开 http://localhost:4000/ 就可以看到一篇内置的 blog 了，使用 Ctrl+C可以停掉服务器。 Tipswin10 系统 http://localhost:4000/ 可能无法打开， 可以使用以下命令换尝试其他端口1hexo s -p 3600 // -p 后面加端口号 参考：issues #1568 创建新的博文1hexo new "Hello Hexo" 命令执行后，会在 \source\_posts\ 目录下生成一个名为 Helli Hexo.md的文件，这个 markdown 文件就是你要编辑的博文了，可以再次启动hexo server 查看新生成的博文。对于文章具体的写作，请参考官方文档 Hexo 写作。 生产静态文件1hexo generate 命令执行完毕后，会在\public\目录下生成一系列文件用于网页部署 部署至 GitHub Pages安装 hexo-deployer-git1npm install hexo-deployer-git --save 在_config.yml中修改参数，首先找到如下内容1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 修改deploy段将其修改为1234deploy: type: git repo: git@github.com:yuan-ji/yuan-ji.github.io.git // 替换为自己的 repo branch: master Tips:: 号之后注意有一个空格 部署1hexo deploy // 或 hexo d 部署命令执行后，hexo 会自动把 public/ 目录下的文件上传至之前参数中的 GitHub 的 repo 中，并建立 commit ，之后就在浏览器中打开页面（例；https://yuan-ji.github.io/ ），查看是否部署成功。 总结配置完成后，之后每次写新博文的步骤如下：123456hexo new "new blog" // 生成新博文hexo server // 启动服务器本地调试（非必须），简化为 hexo shexo clean // 清除缓存hexo generate // 生成静态文件， 简化为：hexo ghexo deploy // 部署至 GitHub，简化为：hexo d 到现在就已经完成 Hexo 的基本配置，可以开始写博文了。 Hexo 优化配置更改 Hexo 主题Hexo 提供了非常多的主题，具体参见 Themes 。默认官方主题为 landscape ， 参考知乎推荐 有哪些好看的 Hexo 主题？，我选择了 Next 主题。Next 主题的官方文档十分详细，请参考以下链接：Next 主题配置官方文档 绑定个人域名GitHub 提供绑定域名的功能，可将个人拥有的域名指向在 GitHub 上创立博客。 注册域名域名供应商推荐：万网 （阿里云旗下）或者 国外的 GoDaddy DNS 解析规则设置 进入 万网，登陆到 控制台，点击左侧的 域名， 在之前已购买的域名栏右侧 ， 点击解析 点击添加解析，记录类型 选择 CNAME, 主机记录 填写 www, 记录值 填写要指向的自己博客的地址，点击 保存 DNS 解析设置一段时间后，可通过在 Windows 的 CMD 中 ping 自己的域名地址查看是否解析成功 创建 CNAME 文件在本地 source/ 目录下添加文佳 CNAME，内容为你所申请的域名地址 www.xxxxx.com，使访问你博客的地址跳转至所设置的域名上。保存后，执行以下命令部署，使设置生效123hexo clean hexo g hexo d 此时在浏览器中输入自己的域名，即可直接跳到自己的博客了。 参考链接 Hexo 官方中文文档 Next 主题官方文档 GitHub SSH 官方文档 Hexo 搭建 Github 静态博客 手把手教你使用 Hexo + Github Pages 搭建个人独立博客 Hexo+Github: 搭建属于自己的静态博客 如何生成 SSH key GitHub Pages 绑定来自阿里云的域名]]></content>
    </entry>

    
  
  
</search>
